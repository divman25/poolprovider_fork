trigger:
- manual

stages:
- stage: A
  jobs:

  ################################################################################
  - job: Configure_poolprovider
  ################################################################################
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      poolname: '$(Build.BuildId)'
      URI: 'https://dev.azure.com/bansalpreeti1'
      projectname: 'test2'
      targetSize: '1'
      sharedSecret: 'sharedsecret1234'

      steps:
      - task: HelmInstaller@1
        displayName: 'Install Helm 2.15.0-rc.1'
        inputs:
          helmVersionToInstall: '2.15.0-rc.1'

      - task: HelmDeploy@0
        displayName: 'helm init'
        inputs:
          azureSubscription: 'RMDev (c00d16c7-6c1f-4c03-9be1-6934a4c49682)'
          azureResourceGroup: 'processmonitor-rg'
          kubernetesCluster: testpool2
          command: init
          arguments: '--service-account tiller'

      - task: HelmDeploy@0
        displayName: 'helm ls'
        inputs:
          azureSubscription: 'RMDev (c00d16c7-6c1f-4c03-9be1-6934a4c49682)'
          azureResourceGroup: 'processmonitor-rg'
          kubernetesCluster: testpool2

      - task: HelmDeploy@0
        displayName: 'helm install'
        inputs:
          azureSubscription: 'RMDev (c00d16c7-6c1f-4c03-9be1-6934a4c49682)'
          azureResourceGroup: 'processmonitor-rg'
          kubernetesCluster: testpool2
          command: install
          chartType: FilePath
          chartPath: 'helm/k8s-poolprovider'
          releaseName: 'release-$(Build.BuildId)'
          overrideValues: '"vsts.VSTS_SECRET=sharedsecret1234"'
          valueFile: 'helm/k8s-poolprovider/values.yaml'
          waitForExecution: false

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
      
            echo 'Hello world'
            sleep 25

      - task: AzureCLI@1
        displayName: 'Azure CLI '
        inputs:
          azureSubscription: 'RMDev (c00d16c7-6c1f-4c03-9be1-6934a4c49682)'
          scriptLocation: inlineScript
          inlineScript: 'az aks get-credentials --name testpool2 --resource-group processmonitor-rg'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            # Write your PowerShell commands here.
      
            Write-Host "Hello World"
      
            # Write your PowerShell commands here.
         
            Write-Host "Hello World"
         
            $ip=$(kubectl get service azure-pipelines-pool -n azuredevops -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
         
            echo $ip
         
            $body = @{
               "name"="$(poolname)"
               "type"="Ignore"
               "acquireAgentEndpoint"="http://$($ip):8080/acquire"
               "releaseAgentEndpoint"="http://$($ip):8080/release"
               "getAgentDefinitionEndpoint"="http://$($ip):8080/definitions"
               "getAgentRequestStatusEndpoint"="http://$($ip):8080/definitions"
               "sharedSecret"="sharedsecret1234"
             } | ConvertTo-Json
         
            $header = @{
              "Accept"="application/json"
              "Authorization"="Basic OmUzdGJpanBya3ZpYXJhZGhyM2Z0empkaDR3a2k2dnVhbHdtc3BuYWQ0amp6aGZwN3gzemE="
              "Content-Type"="application/json"
             } 
         
            $response = Invoke-WebRequest -Uri "$(URI)/_apis/distributedtask/agentclouds?api-version=5.0-preview" -Method 'Post' -Body $body -Headers $header
            
            Write-Host $response
         
            $jsonObj = ConvertFrom-Json $([String]::new($response.Content))
         
            Write-Host $jsonObj.agentCloudId
         
            $body1 = @{
               "name"="$(poolname)"
               "agentCloudId"=$jsonObj.agentCloudId
               "targetSize"=$(targetSize)
             } | ConvertTo-Json
         
             $response1 = Invoke-WebRequest -Uri "$(URI)/_apis/distributedtask/pools?api-version=5.0-preview" -Method 'Post' -Body $body1 -Headers $header
             Write-Host $response1
             $jsonObj1 = ConvertFrom-Json $([String]::new($response1.Content))
            $response2 = Invoke-WebRequest -Uri "$(URI)/$(projectname)/_settings/agentqueues?__rt=fps&__ver=2" -Method 'Get'  -Headers $header
        
            Write-Host $response2
        
            $queuejsonObj = ConvertFrom-Json $([String]::new($response2.Content))
        
            $queueId = $queuejsonObj.fps.dataProviders.data.'ms.vss-build-web.agent-queues-data-provider'.taskAgentQueues.Where({$_.name -eq $(Build.BuildId)}).id
        
            Write-Host "QueueId is ". $queueId
        
            $body3 = @()
            $body3 += [pscustomobject]@{
              "authorized"="true"
              "id"="$queueId"
              "name"="$(Build.BuildId)"
              "type"="queue"   
            }
            
            $here1 = ConvertTo-Json -InputObject @( $body3 )
            $response4 = Invoke-WebRequest -Uri "$(URI)/$(projectname)/_apis/build/authorizedresources?api-version=5.0-preview" -Method 'Patch' -Body $here1 -Headers $header
        
            Write-Host $response4

      - task: HelmDeploy@0
        inputs:
          connectionType: 'Azure Resource Manager'
          azureSubscription: 'RMDev (c00d16c7-6c1f-4c03-9be1-6934a4c49682)'
          azureResourceGroup: 'processmonitor-rg'
          kubernetesCluster: 'testpool2'
          command: 'ls'

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
      
            echo 'Hello world'
            sleep 25

- stage: B
  jobs:

  ################################################################################
  - job: Connect_with_agent
  ################################################################################
  pool:
    name: '$(Build.BuildId)'
    dependsOn: 
    - Configure_poolprovider

    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
      
          echo 'Hello world in agent'
          which buildctl

  

